# -*- coding: utf-8 -*-
"""try.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Tnjmody0lXOx7MvXkkxW9Ez6-r9EzChd
"""

set_seed(0)

from sklearn.model_selection import GridSearchCV
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression

# Define the pipeline
def PolynomialRegression(degree=2, **kwargs):
    return make_pipeline(PolynomialFeatures(degree), LinearRegression(**kwargs))

# Define the parameter grid for the degree of the polynomial
param_grid = {'polynomialfeatures__degree': np.arange(2, 3)}

# Run GridSearchCV for the model
non_linear_model = GridSearchCV(PolynomialRegression(), param_grid, cv=5, scoring='neg_mean_squared_error')
non_linear_model.fit(train_val_x_np, train_val_y_np)

# Print the best parameters
print("Best degree for polynomial regression: ", non_linear_model.best_params_)

# Use the best model from cross-validation
best_non_linear_model = non_linear_model.best_estimator_

# Predict on the test set
predictions = non_linear_model.predict(test_x.numpy())

# Compute metrics
mse_non_linear = mean_squared_error(test_y.numpy(), predictions)
rmse_non_linear = np.sqrt(mse_non_linear)
mae_non_linear = mean_absolute_error(test_y.numpy(), predictions)
r2_non_linear = r2_score(test_y.numpy(), predictions)

# Add Lasso Regression metrics to the dictionary
metrics_dict['Polynomial Regression'] = {
    'MSE': mse_non_linear,
    'RMSE': rmse_non_linear,
    'MAE': mae_non_linear,
    'R²': r2_non_linear
}

# Print metrics
print(f"Metrics for Polynomial Regression Model:")
print(f"Mean Squared Error (MSE): {mse_non_linear:.3e}")
print(f"Root Mean Squared Error (RMSE): {rmse_non_linear:.3e}")
print(f"Mean Absolute Error (MAE): {mae_non_linear:.3e}")
print(f"R-squared (R²): {r2_non_linear:.3f}\n")

# Commented out IPython magic to ensure Python compatibility.
# %%sql
# select * from information_schema.columns;

